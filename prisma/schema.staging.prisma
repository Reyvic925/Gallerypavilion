// Staging Prisma schema (MongoDB)
// Based on schema.prisma, adjusted for staging use.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // Temporarily point staging schema at PostgreSQL to match main migration target.
  // Update this if you intend to use a different provider for staging.
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NOTE: This staging schema is a near-copy of the main schema with minimal
// cleanups to remove SQL-only directives for Mongo compatibility. Review
// and adjust relations/@@map/@@index use as needed for your data model.

model Account {
  id                String  @id @map("_id") @default(auto()) @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @map("_id") @default(auto()) @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @map("_id") @default(auto()) @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("photographer")
  accounts      Account[]
  sessions      Session[]
  photographer  Photographer?
  client        Client?
  collections   Collection[]
  wishlist      WishlistItem[]
  photoReviews        PhotoReview[]
  photographerReviews PhotographerReview[]
  notifications       Notification[]
}

model VerificationToken {
  id         String   @id @map("_id") @default(auto()) @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
}

model Photographer {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  userId      String   @unique
  name        String
  businessName String?
  website     String?
  phone       String?
  bio         String?
  equipment   String?
  experience  String?
  portfolio   String?
  socialMedia Json?
  status      PhotographerStatus @default(pending)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  galleries   Gallery[]
  clients     Client[]
  reviews     PhotographerReview[]
}

model Client {
  id         String   @id @map("_id") @default(auto()) @db.ObjectId
  userId     String   @unique
  email      String   @unique
  name       String
  invitedBy  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  photographer Photographer @relation(fields: [invitedBy], references: [id])
  favorites    Favorite[]
  comments     Comment[]
  purchaseRequests PurchaseRequest[]
  clientInvites ClientInvite[]
}

model Gallery {
  id             String   @id @map("_id") @default(auto()) @db.ObjectId
  title          String
  description    String?
  photographerId String
  visibility     GalleryVisibility @default(private)
  status         GalleryStatus @default(draft)
  expiresAt      DateTime?
  isPublic       Boolean @default(false)
  allowDownloads Boolean @default(false)
  requirePassword Boolean @default(false)
  password       String?
  views          Int @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  photographer   Photographer @relation(fields: [photographerId], references: [id])
  photos         Photo[]
  collections    Collection[]
  invites        Invite[]
  analytics      Analytics[]
}

model Collection {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  title       String
  description String?
  galleryId   String
  userId      String
  sortOrder   Int      @default(0)
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  gallery     Gallery  @relation(fields: [galleryId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  photos      Photo[]
}

model Photo {
  id           String   @id @map("_id") @default(auto()) @db.ObjectId
  galleryId    String
  collectionId String?
  title        String?
  description  String?
  filename     String
  url          String
  thumbnailUrl String
  fileSize     Int
  width        Int?
  height       Int?
  mimeType     String
  metadata     Json?
  price        Float?
  isForSale    Boolean  @default(false)
  tags         Json?
  category     String?
  location     String?
  editionNumber Int?    @default(1)
  totalEditions Int?    @default(1)
  medium       String?
  technique    String?
  materials    String?
  artistStatement String?
  provenance   String?
  certificateId String?
  sortOrder    Int      @default(0)
  isPrivate    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  gallery      Gallery  @relation(fields: [galleryId], references: [id])
  collection   Collection? @relation(fields: [collectionId], references: [id])
  favorites    Favorite[]
  photoFavorites PhotoFavorite[]
  photoDownloads PhotoDownload[]
  comments     Comment[]
  purchaseRequests PurchaseRequest[]
  analytics    Analytics[]
  wishlistItems WishlistItem[]
  reviews      PhotoReview[]
}

model WishlistItem {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  userId    String
  photoId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  photo     Photo    @relation(fields: [photoId], references: [id])
}

model PhotoReview {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  rating    Int
  comment   String?
  userId    String
  photoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  photo     Photo    @relation(fields: [photoId], references: [id])
}

model PhotographerReview {
  id             String   @id @map("_id") @default(auto()) @db.ObjectId
  rating         Int
  comment        String?
  userId         String
  photographerId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  photographer   Photographer @relation(fields: [photographerId], references: [id])
}

model Notification {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  type      String
  title     String
  message   String
  userId    String
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Invite {
  id                 String     @id @map("_id") @default(auto()) @db.ObjectId
  inviteCode         String     @unique
  galleryId          String
  clientEmail        String?
  type               InviteType @default(single_use)
  status             InviteStatus @default(active)
  expiresAt          DateTime?
  maxUsage           Int?
  usageCount         Int        @default(0)
  usedAt             DateTime?
  canView            Boolean    @default(true)
  canFavorite        Boolean    @default(true)
  canComment         Boolean    @default(false)
  canDownload        Boolean    @default(false)
  canRequestPurchase Boolean    @default(true)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  gallery            Gallery    @relation(fields: [galleryId], references: [id])
  clientInvites      ClientInvite[]
}

model ClientInvite {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  clientId  String
  inviteId  String
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id])
  invite    Invite   @relation(fields: [inviteId], references: [id])
}

model Favorite {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  clientId  String
  photoId   String
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id])
  photo     Photo    @relation(fields: [photoId], references: [id])
}

model PhotoFavorite {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  photoId   String
  clientIp  String
  createdAt DateTime @default(now())
  photo     Photo    @relation(fields: [photoId], references: [id])
}

model PhotoDownload {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  photoId   String
  clientIp  String
  createdAt DateTime @default(now())
  photo     Photo    @relation(fields: [photoId], references: [id])
}

model Comment {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  clientId  String
  photoId   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [clientId], references: [id])
  photo     Photo    @relation(fields: [photoId], references: [id])
}

model PurchaseRequest {
  id          String              @id @map("_id") @default(auto()) @db.ObjectId
  clientId    String
  photoId     String
  licenseType PurchaseLicenseType @default(personal)
  status      PurchaseStatus      @default(pending)
  message     String?
  price       Float?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  client      Client              @relation(fields: [clientId], references: [id])
  photo       Photo               @relation(fields: [photoId], references: [id])
}

model Analytics {
  id         String        @id @map("_id") @default(auto()) @db.ObjectId
  type       AnalyticsType
  galleryId  String?
  photoId    String?
  clientId   String?
  inviteCode String?
  metadata   Json?
  createdAt  DateTime      @default(now())
  gallery    Gallery? @relation(fields: [galleryId], references: [id])
  photo      Photo?   @relation(fields: [photoId], references: [id])
}

model SystemSetting {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  key         String   @unique
  value       String
  type        String   @default("string")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum PhotographerStatus {
  pending
  approved
  rejected
  suspended
}

enum GalleryVisibility {
  private
  invite_only
  public
}

enum GalleryStatus {
  draft
  active
  archived
}

enum InviteType {
  single_use
  multi_use
  time_limited
}

enum InviteStatus {
  pending
  active
  used
  expired
  revoked
}

enum PurchaseLicenseType {
  personal
  commercial
  editorial
  extended
}

enum PurchaseStatus {
  pending
  approved
  rejected
  completed
}

enum AnalyticsType {
  gallery_view
  photo_view
  photo_favorite
  photo_unfavorite
  photo_comment
  photo_download
  purchase_request
  gallery_access
  invite_created
  invite_used
  admin_action
}

model NewsletterSubscription {
  id           String   @id @map("_id") @default(auto()) @db.ObjectId
  email        String   @unique
  subscribedAt DateTime @default(now())
  isActive     Boolean  @default(true)
  unsubscribedAt DateTime?
}
