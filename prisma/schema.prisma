generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String               @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                String               @default("photographer")
  resetToken          String?
  resetTokenExpiry    DateTime?
  accounts            Account[]
  notifications       Notification[]
  photoReviews        PhotoReview[]
  photographerReviews PhotographerReview[]
  sessions            Session[]
  client              Client?
  collections         Collection[]
  photographer        Photographer?
  wishlist            WishlistItem[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Photographer {
  id           String               @id @default(cuid())
  userId       String               @unique
  name         String
  businessName String?
  website      String?
  phone        String?
  bio          String?
  equipment    String?
  experience   String?
  portfolio    String?
  socialMedia  Json?
  status       PhotographerStatus   @default(pending)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  reviews      PhotographerReview[]
  clients      Client[]             @relation("PhotographerClients")
  galleries    Gallery[]
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("photographers")
}

model Client {
  id               String            @id @default(cuid())
  userId           String            @unique
  email            String            @unique
  name             String
  invitedBy        String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  clientInvites    ClientInvite[]
  photographer     Photographer      @relation("PhotographerClients", fields: [invitedBy], references: [id])
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments         Comment[]
  favorites        Favorite[]
  purchaseRequests PurchaseRequest[]

  @@map("clients")
}

model Gallery {
  id              String            @id @default(cuid())
  title           String
  description     String?
  photographerId  String
  visibility      GalleryVisibility @default(private)
  status          GalleryStatus     @default(draft)
  expiresAt       DateTime?
  isPublic        Boolean           @default(false)
  allowDownloads  Boolean           @default(false)
  requirePassword Boolean           @default(false)
  password        String?
  views           Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  analytics       Analytics[]
  collections     Collection[]
  photographer    Photographer      @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  invites         Invite[]
  photos          Photo[]

  @@map("galleries")
}

model Collection {
  id          String   @id @default(cuid())
  title       String
  description String?
  galleryId   String
  userId      String
  sortOrder   Int      @default(0)
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gallery     Gallery  @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  photos      Photo[]

  @@map("collections")
}

model Photo {
  id               String            @id @default(cuid())
  galleryId        String
  collectionId     String?
  // Basic Information
  title            String // Allows longer titles
  description      String? // Allows longer descriptions
  filename         String
  url              String
  thumbnailUrl     String
  fileSize         Int
  width            Int?
  height           Int?
  mimeType         String
  metadata         Json?
  price            Float? // For precise decimal handling
  isForSale        Boolean         @default(false)
  tags             Json?           // Array of strings
  category         String?         
  location         String?         
  sortOrder        Int             @default(0)
  isPrivate        Boolean         @default(false)
  
  // Artwork Information
  photographerName  String?
  yearCreated      String?        // YYYY format
  yearPrinted      String?        // YYYY format
  seriesName       String?
  
  // Edition & Authenticity
  editionNumber    String?        // Format: n/m
  editionSize      Int?           // For whole numbers only
  signatureType    String?
  certificateOfAuthenticity Boolean @default(false)
  certificateId    String?        // Certificate of authenticity identifier (e.g., COA-...)
  
  // Materials & Size
  medium           String?
  printingTechnique String?
  paperType        String?
  dimensions       Json?          // { width: number, height: number, units: string, framedDimensions?: object }
  framingOptions   Json?          // Array of strings
  
  // Context
  artistStatement  String?        // Allows longer text
  exhibitionHistory Json?         // Array of strings
  
  // Purchase Information
  shippingDetails  Json?          // { method: string, timeframe: string, restrictions?: string }
  returnPolicy     String?        // Allows longer text
  
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  reviews          PhotoReview[]
  analytics        Analytics[]
  comments         Comment[]
  favorites        Favorite[]
  photoDownloads   PhotoDownload[]
  photoFavorites   PhotoFavorite[]
  collection       Collection?       @relation(fields: [collectionId], references: [id])
  gallery          Gallery           @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  purchaseRequests PurchaseRequest[]
  wishlistItems    WishlistItem[]

  @@map("photos")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  photoId   String
  createdAt DateTime @default(now())
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, photoId])
  @@map("wishlist_items")
}

model PhotoReview {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  photoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, photoId])
}

model PhotographerReview {
  id             String       @id @default(cuid())
  rating         Int
  comment        String?
  userId         String
  photographerId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  photographer   Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, photographerId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  userId    String
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
}

model Invite {
  id                 String         @id @default(cuid())
  inviteCode         String         @unique
  galleryId          String
  clientEmail        String?
  status             InviteStatus   @default(active)
  canView            Boolean        @default(true)
  canRequestPurchase Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  clientInvites      ClientInvite[]
  gallery            Gallery        @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  @@map("invites")
}

model ClientInvite {
  id        String   @id @default(cuid())
  clientId  String
  inviteId  String
  createdAt DateTime @default(now())
  invite    Invite   @relation(fields: [inviteId], references: [id], onDelete: Cascade)
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, inviteId])
  @@map("client_invites")
}

model Favorite {
  id        String   @id @default(cuid())
  clientId  String
  photoId   String
  createdAt DateTime @default(now())
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, photoId])
  @@map("favorites")
}

model PhotoFavorite {
  id        String   @id @default(cuid())
  photoId   String
  clientIp  String
  createdAt DateTime @default(now())
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique([photoId, clientIp])
  @@map("photo_favorites")
}

model PhotoDownload {
  id        String   @id @default(cuid())
  photoId   String
  clientIp  String
  createdAt DateTime @default(now())
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@map("photo_downloads")
}

model Comment {
  id        String   @id @default(cuid())
  clientId  String
  photoId   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model PurchaseRequest {
  id          String              @id @default(cuid())
  clientId    String
  photoId     String
  licenseType PurchaseLicenseType @default(personal)
  status      PurchaseStatus      @default(pending)
  message     String?
  price       Float?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  photo       Photo               @relation(fields: [photoId], references: [id], onDelete: Cascade)
  client      Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("purchase_requests")
}

model Analytics {
  id         String        @id @default(cuid())
  type       AnalyticsType
  galleryId  String?
  photoId    String?
  clientId   String?
  inviteCode String?
  metadata   Json?
  createdAt  DateTime      @default(now())
  photo      Photo?        @relation(fields: [photoId], references: [id], onDelete: Cascade)
  gallery    Gallery?      @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  @@map("analytics")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   @default("string")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model NewsletterSubscription {
  id             String    @id @default(cuid())
  email          String    @unique
  subscribedAt   DateTime  @default(now())
  isActive       Boolean   @default(true)
  unsubscribedAt DateTime?

  @@map("newsletter_subscriptions")
}

enum PhotographerStatus {
  pending
  approved
  rejected
  suspended
}

enum GalleryVisibility {
  private
  invite_only
  public
}

enum GalleryStatus {
  draft
  active
  archived
}

enum InviteType {
  single_use
  multi_use
  time_limited
}

enum InviteStatus {
  pending
  active
  used
  expired
  revoked
}

enum PurchaseLicenseType {
  personal
  commercial
  editorial
  extended
}

enum PurchaseStatus {
  pending
  approved
  rejected
  completed
}

enum AnalyticsType {
  gallery_view
  photo_view
  photo_favorite
  photo_unfavorite
  photo_comment
  photo_download
  purchase_request
  gallery_access
  invite_created
  invite_used
  admin_action
}
