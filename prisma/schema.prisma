<<<<<<< HEAD
=======
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
generator client {
  provider = "prisma-client-js"
}

datasource db {
<<<<<<< HEAD
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

=======
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
<<<<<<< HEAD
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
=======

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
<<<<<<< HEAD
  id                  String               @id @default(cuid())
  name                String?
  email               String               @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                String               @default("photographer")
  resetToken          String?
  resetTokenExpiry    DateTime?
  accounts            Account[]
  notifications       Notification[]
  photoReviews        PhotoReview[]
  photographerReviews PhotographerReview[]
  sessions            Session[]
  client              Client?
  collections         Collection[]
  photographer        Photographer?
  wishlist            WishlistItem[]
=======
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("photographer")
  accounts      Account[]
  sessions      Session[]
  photographer  Photographer?
  client        Client?
  collections   Collection[]
  wishlist      WishlistItem[]
  photoReviews        PhotoReview[]
  photographerReviews PhotographerReview[]
  notifications       Notification[]
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

<<<<<<< HEAD
model Photographer {
  id           String               @id @default(cuid())
  userId       String               @unique
  name         String
  businessName String?
  website      String?
  phone        String?
  bio          String?
  equipment    String?
  experience   String?
  portfolio    String?
  socialMedia  Json?
  status       PhotographerStatus   @default(pending)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  reviews      PhotographerReview[]
  clients      Client[]             @relation("PhotographerClients")
  galleries    Gallery[]
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

=======
// Photography marketplace models
model Photographer {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  businessName String?
  website     String?
  phone       String?
  bio         String?
  equipment   String?
  experience  String?
  portfolio   String?
  socialMedia Json?    // Store social media links as JSON
  status      PhotographerStatus @default(pending)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  galleries   Gallery[]
  clients     Client[] @relation("PhotographerClients")
  reviews     PhotographerReview[]
  
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  @@map("photographers")
}

model Client {
<<<<<<< HEAD
  id               String            @id @default(cuid())
  userId           String            @unique
  email            String            @unique
  name             String
  invitedBy        String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  clientInvites    ClientInvite[]
  photographer     Photographer      @relation("PhotographerClients", fields: [invitedBy], references: [id])
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments         Comment[]
  favorites        Favorite[]
  purchaseRequests PurchaseRequest[]

=======
  id         String   @id @default(cuid())
  userId     String   @unique
  email      String   @unique
  name       String
  invitedBy  String   // Photographer ID who invited this client
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  photographer Photographer @relation("PhotographerClients", fields: [invitedBy], references: [id])
  favorites    Favorite[]
  comments     Comment[]
  purchaseRequests PurchaseRequest[]
  clientInvites ClientInvite[]
  
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  @@map("clients")
}

model Gallery {
<<<<<<< HEAD
  id              String            @id @default(cuid())
  title           String
  description     String?
  photographerId  String
  visibility      GalleryVisibility @default(private)
  status          GalleryStatus     @default(draft)
  expiresAt       DateTime?
  isPublic        Boolean           @default(false)
  allowDownloads  Boolean           @default(false)
  requirePassword Boolean           @default(false)
  password        String?
  views           Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  analytics       Analytics[]
  collections     Collection[]
  photographer    Photographer      @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  invites         Invite[]
  photos          Photo[]

=======
  id             String   @id @default(cuid())
  title          String
  description    String?
  photographerId String
  visibility     GalleryVisibility @default(private)
  status         GalleryStatus @default(draft)
  expiresAt      DateTime?
  isPublic       Boolean @default(false)
  allowDownloads Boolean @default(false)
  requirePassword Boolean @default(false)
  password       String?
  views          Int @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  photographer   Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  photos         Photo[]
  collections    Collection[]
  invites        Invite[]
  analytics      Analytics[]
  
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  @@map("galleries")
}

model Collection {
  id          String   @id @default(cuid())
  title       String
  description String?
  galleryId   String
  userId      String
  sortOrder   Int      @default(0)
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
<<<<<<< HEAD
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gallery     Gallery  @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  photos      Photo[]

=======
  
  // Relations
  gallery     Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      Photo[]
  
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  @@map("collections")
}

model Photo {
<<<<<<< HEAD
  id               String            @id @default(cuid())
  galleryId        String
  collectionId     String?
  // Basic Information
  title            String // Allows longer titles
  description      String? // Allows longer descriptions
  filename         String
  url              String
  thumbnailUrl     String
  fileSize         Int
  width            Int?
  height           Int?
  mimeType         String
  metadata         Json?
  price            Float? // For precise decimal handling
  isForSale        Boolean         @default(false)
  tags             Json?           // Array of strings
  category         String?         
  location         String?         
  sortOrder        Int             @default(0)
  isPrivate        Boolean         @default(false)
  
  // Artwork Information
  photographerName  String?
  yearCreated      String?        // YYYY format
  yearPrinted      String?        // YYYY format
  seriesName       String?
  
  // Edition & Authenticity
  editionNumber    String?        // Format: n/m
  editionSize      Int?           // For whole numbers only
  signatureType    String?
  certificateOfAuthenticity Boolean @default(false)
  certificateId    String?        // Certificate of authenticity identifier (e.g., COA-...)
  
  // Materials & Size
  medium           String?
  printingTechnique String?
  paperType        String?
  dimensions       Json?          // { width: number, height: number, units: string, framedDimensions?: object }
  framingOptions   Json?          // Array of strings
  
  // Context
  artistStatement  String?        // Allows longer text
  exhibitionHistory Json?         // Array of strings
  
  // Purchase Information
  shippingDetails  Json?          // { method: string, timeframe: string, restrictions?: string }
  returnPolicy     String?        // Allows longer text
  
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  reviews          PhotoReview[]
  analytics        Analytics[]
  comments         Comment[]
  favorites        Favorite[]
  photoDownloads   PhotoDownload[]
  photoFavorites   PhotoFavorite[]
  collection       Collection?       @relation(fields: [collectionId], references: [id])
  gallery          Gallery           @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  purchaseRequests PurchaseRequest[]
  wishlistItems    WishlistItem[]

=======
  id           String   @id @default(cuid())
  galleryId    String
  collectionId String?
  title        String?
  description  String?
  filename     String
  url          String
  thumbnailUrl String
  fileSize     Int
  width        Int?
  height       Int?
  mimeType     String
  metadata     Json?    // EXIF data, AI tags, etc.
  
  // Pricing fields
  price        Float?   // Price for the photo
  isForSale    Boolean  @default(false)
  
  // Additional metadata
  tags         Json?    // Photo tags/keywords as JSON array
  category     String?  // Photo category
  location     String?  // Where photo was taken
  
  // Artwork authenticity fields
  editionNumber   Int?     @default(1)    // Edition number for limited editions
  totalEditions   Int?     @default(1)    // Total number of editions
  medium          String?                 // Medium used (e.g., "Silver Gelatin Print")
  technique       String?                 // Technique used (e.g., "Traditional Darkroom")
  materials       String?                 // Materials used (e.g., "Fiber Paper, Silver")
  artistStatement String?                 // Artist's statement about the work
  provenance      String?                 // Provenance and exhibition history
  certificateId   String?                 // Unique certificate of authenticity ID
  
  sortOrder    Int      @default(0)
  isPrivate    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  gallery          Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  collection       Collection? @relation(fields: [collectionId], references: [id], onDelete: SetNull)
  favorites        Favorite[]
  photoFavorites   PhotoFavorite[]
  photoDownloads   PhotoDownload[]
  comments         Comment[]
  purchaseRequests PurchaseRequest[]
  analytics        Analytics[]
  wishlistItems    WishlistItem[]
  reviews          PhotoReview[]
  
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  @@map("photos")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  photoId   String
  createdAt DateTime @default(now())
<<<<<<< HEAD
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

=======
  
  // Relations
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  photo     Photo @relation(fields: [photoId], references: [id], onDelete: Cascade)
  
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  @@unique([userId, photoId])
  @@map("wishlist_items")
}

model PhotoReview {
  id        String   @id @default(cuid())
<<<<<<< HEAD
  rating    Int
=======
  rating    Int      // 1-5 stars
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  comment   String?
  userId    String
  photoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
<<<<<<< HEAD
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

=======
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  photo Photo @relation(fields: [photoId], references: [id], onDelete: Cascade)
  
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  @@unique([userId, photoId])
}

model PhotographerReview {
<<<<<<< HEAD
  id             String       @id @default(cuid())
  rating         Int
  comment        String?
  userId         String
  photographerId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  photographer   Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

=======
  id             String   @id @default(cuid())
  rating         Int      // 1-5 stars
  comment        String?
  userId         String
  photographerId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  photographer Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  @@unique([userId, photographerId])
}

model Notification {
  id        String   @id @default(cuid())
<<<<<<< HEAD
  type      String
=======
  type      String   // 'new_photo', 'price_change', 'purchase_update', 'gallery_invite'
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  title     String
  message   String
  userId    String
  isRead    Boolean  @default(false)
<<<<<<< HEAD
  data      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

=======
  data      Json?    // Additional data like photoId, galleryId, etc.
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  @@index([userId, isRead])
  @@index([createdAt])
}

<<<<<<< HEAD
model Invite {
  id                 String         @id @default(cuid())
  inviteCode         String         @unique
  galleryId          String
  clientEmail        String?
  status             InviteStatus   @default(active)
  canView            Boolean        @default(true)
  canRequestPurchase Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  clientInvites      ClientInvite[]
  gallery            Gallery        @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  @@map("invites")
}

=======


model Invite {
  id                 String     @id @default(cuid())
  inviteCode         String     @unique
  galleryId          String
  clientEmail        String?
  type               InviteType @default(single_use)
  status             InviteStatus @default(active)
  expiresAt          DateTime?
  maxUsage           Int?
  usageCount         Int        @default(0)
  usedAt             DateTime?
  
  // Permissions
  canView            Boolean    @default(true)
  canFavorite        Boolean    @default(true)
  canComment         Boolean    @default(false)
  canDownload        Boolean    @default(false)
  canRequestPurchase Boolean    @default(true)
  
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  
  // Relations
  gallery            Gallery    @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  clientInvites      ClientInvite[]
  
  @@map("invites")
}

// Junction table for Client-Invite many-to-many relationship
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
model ClientInvite {
  id        String   @id @default(cuid())
  clientId  String
  inviteId  String
  createdAt DateTime @default(now())
<<<<<<< HEAD
  invite    Invite   @relation(fields: [inviteId], references: [id], onDelete: Cascade)
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

=======
  
  // Relations
  client    Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invite    Invite @relation(fields: [inviteId], references: [id], onDelete: Cascade)
  
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  @@unique([clientId, inviteId])
  @@map("client_invites")
}

model Favorite {
  id        String   @id @default(cuid())
  clientId  String
  photoId   String
  createdAt DateTime @default(now())
<<<<<<< HEAD
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

=======
  
  // Relations
  client    Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  photo     Photo  @relation(fields: [photoId], references: [id], onDelete: Cascade)
  
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  @@unique([clientId, photoId])
  @@map("favorites")
}

model PhotoFavorite {
  id        String   @id @default(cuid())
  photoId   String
  clientIp  String
  createdAt DateTime @default(now())
<<<<<<< HEAD
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)

=======
  
  // Relations
  photo     Photo @relation(fields: [photoId], references: [id], onDelete: Cascade)
  
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  @@unique([photoId, clientIp])
  @@map("photo_favorites")
}

model PhotoDownload {
  id        String   @id @default(cuid())
  photoId   String
  clientIp  String
  createdAt DateTime @default(now())
<<<<<<< HEAD
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)

=======
  
  // Relations
  photo     Photo @relation(fields: [photoId], references: [id], onDelete: Cascade)
  
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  @@map("photo_downloads")
}

model Comment {
  id        String   @id @default(cuid())
  clientId  String
  photoId   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
<<<<<<< HEAD
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

=======
  
  // Relations
  client    Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  photo     Photo  @relation(fields: [photoId], references: [id], onDelete: Cascade)
  
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  @@map("comments")
}

model PurchaseRequest {
  id          String              @id @default(cuid())
  clientId    String
  photoId     String
  licenseType PurchaseLicenseType @default(personal)
  status      PurchaseStatus      @default(pending)
  message     String?
  price       Float?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
<<<<<<< HEAD
  photo       Photo               @relation(fields: [photoId], references: [id], onDelete: Cascade)
  client      Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)

=======
  
  // Relations
  client      Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  photo       Photo  @relation(fields: [photoId], references: [id], onDelete: Cascade)
  
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  @@map("purchase_requests")
}

model Analytics {
  id         String        @id @default(cuid())
  type       AnalyticsType
  galleryId  String?
  photoId    String?
  clientId   String?
  inviteCode String?
<<<<<<< HEAD
  metadata   Json?
  createdAt  DateTime      @default(now())
  photo      Photo?        @relation(fields: [photoId], references: [id], onDelete: Cascade)
  gallery    Gallery?      @relation(fields: [galleryId], references: [id], onDelete: Cascade)

=======
  metadata   Json?         // Additional data like user agent, duration, etc.
  createdAt  DateTime      @default(now())
  
  // Relations
  gallery    Gallery? @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  photo      Photo?   @relation(fields: [photoId], references: [id], onDelete: Cascade)
  
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
  @@map("analytics")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   @default("string")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
<<<<<<< HEAD

  @@map("system_settings")
}

model NewsletterSubscription {
  id             String    @id @default(cuid())
  email          String    @unique
  subscribedAt   DateTime  @default(now())
  isActive       Boolean   @default(true)
  unsubscribedAt DateTime?

  @@map("newsletter_subscriptions")
}

=======
  
  @@map("system_settings")
}

// Enums
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
enum PhotographerStatus {
  pending
  approved
  rejected
  suspended
}

enum GalleryVisibility {
  private
  invite_only
  public
}

enum GalleryStatus {
  draft
  active
  archived
}

enum InviteType {
  single_use
  multi_use
  time_limited
}

enum InviteStatus {
  pending
  active
  used
  expired
  revoked
}

enum PurchaseLicenseType {
  personal
  commercial
  editorial
  extended
}

enum PurchaseStatus {
  pending
  approved
  rejected
  completed
}

enum AnalyticsType {
  gallery_view
  photo_view
  photo_favorite
  photo_unfavorite
  photo_comment
  photo_download
  purchase_request
  gallery_access
  invite_created
  invite_used
  admin_action
}
<<<<<<< HEAD
=======

model NewsletterSubscription {
  id           String   @id @default(cuid())
  email        String   @unique
  subscribedAt DateTime @default(now())
  isActive     Boolean  @default(true)
  unsubscribedAt DateTime?
  
  @@map("newsletter_subscriptions")
}
>>>>>>> e2f1b7a994117b9fb44ea004e697ba6989c4c810
