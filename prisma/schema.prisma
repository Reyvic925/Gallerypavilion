generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PHOTOGRAPHER
  CLIENT
}

enum PhotographerStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  role           Role     @default(CLIENT)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  passwordHash   String?
  resetToken     String?
  resetTokenExp  DateTime?
  
  // Relations
  photographer   Photographer?
  sharedGalleries Gallery[]     @relation("SharedGalleries")
  ownedGalleries  Gallery[]     @relation("OwnedGalleries")
  sharedLinks     ShareLink[]
}

model Photographer {
  id           String            @id @default(cuid())
  userId       String            @unique
  user         User             @relation(fields: [userId], references: [id])
  status       PhotographerStatus @default(PENDING)
  bio          String?
  equipment    String?
  experience   String?
  portfolio    String?
  specialties  String[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  galleries    Gallery[]        @relation("PhotographerGalleries")
}

model Gallery {
  id            String    @id @default(cuid())
  title         String
  description   String?
  photographerId String
  photographer  Photographer @relation("PhotographerGalleries", fields: [photographerId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isPublished   Boolean   @default(false)
  publishedAt   DateTime?
  
  // Relations
  photos        Photo[]
  sharedWith    User[]    @relation("SharedGalleries")
  owner         User      @relation("OwnedGalleries", fields: [ownerId], references: [id])
  ownerId       String
  shareLinks    ShareLink[]
}

model Photo {
  id        String   @id @default(cuid())
  url       String
  thumbUrl  String?
  title     String?
  caption   String?
  galleryId String
  gallery   Gallery  @relation(fields: [galleryId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metadata  Json?    @default("{}")
}

model ShareLink {
  id        String   @id @default(cuid())
  code      String   @unique
  galleryId String
  gallery   Gallery  @relation(fields: [galleryId], references: [id])
  createdBy String
  user      User     @relation(fields: [createdBy], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime?
  isActive  Boolean  @default(true)
}
