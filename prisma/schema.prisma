// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String               @id @default(cuid()) @map("_id")
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                String               @default("client")
  resetToken          String?
  resetTokenExpiry    DateTime?
  accounts            Account[]
  sessions            Session[]
  invites             ClientInvite[]
  favoritedPhotos     FavoritePhoto[]
  reviews             PhotoReview[]
  photographerReviews PhotographerReview[]
  notifications       Notification[]
  wishlist            WishlistItem[]
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Photographer {
  id          String   @id @default(cuid()) @map("_id")
  userId      String   @unique
  name        String
  email       String   @unique
  bio         String?
  avatar      String?
  website     String?
  instagram   String?
  facebook    String?
  twitter     String?
  status      PhotographerStatus @default(PENDING)
  galleries   Gallery[]
  photos      Photo[]
  reviews     PhotographerReview[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("photographers")
}

model Client {
  id         String   @id @default(cuid()) @map("_id")
  userId     String?  @unique
  name       String
  email      String   @unique
  invites    ClientInvite[]
  favorites  FavoritePhoto[]
  reviews    PhotoReview[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("clients")
}

model Gallery {
  id             String   @id @default(cuid()) @map("_id")
  name           String
  description    String?
  coverImage     String?
  isPublic       Boolean  @default(false)
  photographerId String
  photographer   Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  photos         Photo[]
  invites        Invite[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@map("galleries")
}

model Photo {
  id               String   @id @default(cuid()) @map("_id")
  title            String
  description      String?
  url             String
  thumbnailUrl    String?
  width           Int?
  height          Int?
  size            Int?
  format          String?
  photographerId   String
  photographer     Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  galleryId       String?
  gallery         Gallery? @relation(fields: [galleryId], references: [id], onDelete: SetNull)
  price           Float?
  currency        String   @default("USD")
  isPublic        Boolean  @default(false)
  isFeatured      Boolean  @default(false)
  favorites       FavoritePhoto[]
  reviews         PhotoReview[]
  downloads       PhotoDownload[]
  views           PhotoView[]
  purchaseRequests PurchaseRequest[]
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("photos")
}

model FavoritePhoto {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  photoId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique([userId, photoId])
  @@map("favorites")
}

model PhotoReview {
  id        String   @id @default(cuid()) @map("_id")
  rating    Int      // 1-5 stars
  comment   String?
  userId    String
  photoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique([userId, photoId])
  @@map("photo_reviews")
}

model PhotographerReview {
  id             String   @id @default(cuid()) @map("_id")
  rating         Int      // 1-5 stars
  comment        String?
  userId         String
  photographerId String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photographer   Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, photographerId])
  @@map("photographer_reviews")
}

model Notification {
  id        String   @id @default(cuid()) @map("_id")
  type      String   // 'new_photo', 'price_change', 'purchase_update', 'gallery_invite'
  title     String
  message   String
  userId    String
  isRead    Boolean  @default(false)
  data      Json?    // Additional data like photoId, galleryId, etc.
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, isRead])
  @@map("notifications")
}

model Invite {
  id          String   @id @default(cuid()) @map("_id")
  code        String   @unique
  email       String?
  galleryId   String
  gallery     Gallery  @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  clients     ClientInvite[]
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("invites")
}

model ClientInvite {
  id        String   @id @default(cuid()) @map("_id")
  clientId  String
  inviteId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invite    Invite   @relation(fields: [inviteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([clientId, inviteId])
  @@map("client_invites")
}

model WishlistItem {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  photoId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, photoId])
  @@map("wishlist")
}

model PhotoDownload {
  id        String   @id @default(cuid()) @map("_id")
  photoId   String
  clientId  String?
  clientIp  String?
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([photoId, clientIp])
  @@map("photo_downloads")
}

model PhotoView {
  id        String   @id @default(cuid()) @map("_id")
  photoId   String
  clientId  String?
  clientIp  String?
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([photoId, clientIp])
  @@map("photo_views")
}

model PurchaseRequest {
  id           String   @id @default(cuid()) @map("_id")
  status       PurchaseStatus @default(PENDING)
  photoId      String
  userId       String
  price        Float
  currency     String   @default("USD")
  photo        Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("purchase_requests")
}

model Analytics {
  id         String   @id @default(cuid()) @map("_id")
  type       String   // 'view', 'download', 'invite_open', etc.
  userId     String?
  photoId    String?
  galleryId  String?
  clientId   String?
  clientIp   String?
  inviteCode String?
  metadata   Json?    // Additional data like user agent, duration, etc.
  createdAt  DateTime @default(now())

  @@map("analytics")
}

model SystemSettings {
  id          String   @id @default(cuid()) @map("_id")
  key         String   @unique
  value       Json
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

enum PhotographerStatus {
  PENDING
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum PurchaseStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}
